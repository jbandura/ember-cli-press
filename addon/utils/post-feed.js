import Ember from 'ember';
import markdownFiles from 'ember-cli-press/markdownFiles';
import postParserService from 'ember-cli-press/utils/post-parser';
import moment from 'moment';

const postParser = postParserService.create();
const { Service } = Ember;

export default Service.extend({
  /**
   * List of markdown files generated by index.js
   * @property markdownFiles
   * @type {Object[]}
   */
  markdownFiles,

  /**
   * postParser service
   * @property postParser
   * @type {PostParser}
   */
  postParser,

  /**
   * List of feeds
   * @property feed
   * @type {Ember.Object[]}
   */
  feed: null,

  /**
   * @param {String} key
   * @param {String} value
   * @returns {Ember.Object[]} list of feeds matching given criteria
   */
  findBy(key, value) {
    if (!Ember.A(['category', 'categories']).contains(key)) {
      return this.get('feed').filterBy(key, value);
    }
    // we have a category search
    return this.get('feed').filter((post) => {
      return post.get('categories').contains(value);
    });
  },

  /**
   * Parse feed when object created.
   */
  init() {
    this._super(...arguments);
    this._parseFeed();
  },

  /**
   * Parses given list of markdown files using parserService and then
   * creates an array of posts. Posts are sorted by date ASC.
   *
   * @private
   */
  _parseFeed() {
    let markdownFiles = this.get('markdownFiles');
    let processedData = Object.keys(markdownFiles).map((fileName) => {
      let content = markdownFiles[fileName];
      return Ember.Object.create(
        this.get('postParser').parse(content)
      );
    });

    let sortedData = processedData.sort((itemA, itemB) => {
      let dateA = moment(itemA.get('date'));
      let dateB = moment(itemB.get('date'));

      if (dateA.isAfter(dateB)) { return -1; }
      if (dateA.isBefore(dateB)) { return 1; }

      return 0;
    });

    this.set('feed', Ember.A(sortedData));
  },
});
